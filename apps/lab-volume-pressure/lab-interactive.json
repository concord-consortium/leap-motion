{
  "title": "The Volume-Pressure Relationship",
  "publicationStatus": "public",
  "subtitle": "Explore how the volume of a gas affects pressure.",
  "aspectRatio": 1.35,
  "about": [
    "Gases can be compressed into smaller volumes. How does compressing a gas affect its pressure?",
    "",
    "Run the model, then change the volume of the containers and observe the change in pressure.",
    "The moving wall converts the effect of molecular collisions into pressure and acts as a pressure gauge.",
    "What happens to the pressure when the volume changes?",
    "",
    "----",
    "*Note: Although the atoms in this model are in a flat plane, volume is calculated using 0.1 nm as the depth of the container.*"
  ],
  "models": [
    {
      "type": "md2d",
      "id": "page3$0",
      "viewOptions": {
        "controlButtons": "play_reset"
      },
      "onLoad": [
        "var MARKER_W = 0.1;",
        "var COLLISION_DIST = 0.1;",
        "var MAX_ATOM_VEL = 0.0007;",
        "var markerAlpha = get('markerAlpha');",
        "callEvery(50, function () {",
        "  // parseInt() is not available in scripts... Use * 1 to convert value to number.",
        "  var markerFadeSpeed = get('markerFadeSpeed') * 1 || 0;",
        "  var markersCount = get('markersCount');",
        "  var markerH = 2.5 / markersCount;",
        "  var orient = get('orientation');",
        "  var o = getObstacleProperties(0);",
        "  for (var i = 0; i < markersCount; i++) {",
        "    markerAlpha[i] -= markerFadeSpeed;",
        "    markerAlpha[i] = Math.max(0, markerAlpha[i]);",
        "  }",
        "  for (var i = 0, len = getNumberOfAtoms(); i < len; i++) {",
        "    var a = getAtomProperties(i);",
        "    var mIdx = Math.floor(a.y / markerH);",
        "    if ((orient === 'right' && a.x > o.x - COLLISION_DIST && a.vx < 0) ||",
        "        (orient === 'left' && a.x < o.x + o.width + COLLISION_DIST && a.vx > 0)) {",
        "      var mAlpha = Math.sqrt(get('markerSensitivity') * Math.abs(a.vx) / MAX_ATOM_VEL);",
        "      markerAlpha[mIdx] = Math.max(markerAlpha[mIdx], mAlpha);",
        "    }",
        "  }",
        "  batch(function () {",
        "    for (var i = 0; i < markersCount; i++) {",
        "      setShapeProperties(i, {",
        "        x: orient === 'right' ? o.x : o.x + o.width - MARKER_W,",
        "        color: 'rgba(226, 16, 16, ' + markerAlpha[i] + ')'",
        "      });",
        "    }",
        "  });",
        "});"
      ]
    }
  ],
  "parameters": [
    {
      "name": "markerAlpha",
      "initialValue": {}
    },
    {
      "name": "markerFadeSpeed",
      "initialValue": 0.075
    },
    {
      "name": "markerSensitivity",
      "initialValue": 1
    },
    {
      "name": "markersCount",
      "initialValue": 25,
      "onChange": [
        "// parseInt() is not available in scripts... Use * 1 to convert value to number.",
        "var count = value * 1 || 0;",
        "var MARKER_W = 0.1;",
        "var markerH = 2.5 / count;",
        "var markerAlpha = get('markerAlpha');",
        "for (var i = 0, len = getNumberOfShapes(); i < len; i++) removeShape(0);",
        "for (var i = 0; i < count; i++) {",
        "  addShape({",
        "    type: 'rectangle',",
        "    x: 0,",
        "    y: i * markerH,",
        "    width: MARKER_W,",
        "    height: markerH,",
        "    color: 'transparent',",
        "    lineColor: 'transparent',",
        "    layer: 1",
        "  });",
        "  markerAlpha[i] = 0;",
        "}"
      ]
    },
    {
      "name": "prevOrientation",
      "initialValue": "left"
    },
    {
      "name": "orientation",
      "initialValue": "left",
      "onChange": [
        "if (value === get('prevOrientation')) return;",
        "var width = get('width');",
        "batch(function() {",
        "  var num = getNumberOfAtoms();",
        "  for(var i = 0; i < num; i++) {",
        "    var atom = getAtomProperties(i);",
        "    setAtomProperties(i, {x: width - atom.x, vx: -atom.vx});",
        "  }",
        "  var obs = getObstacleProperties(0);",
        "  setObstacleProperties(0, {x: width - obs.x - obs.width});",
        "});",
        "set('prevOrientation', value);"
      ]
    },
    {
      "name": "volume",
      "unitAbbreviation": "nm³",
      "label": "Volume",
      "initialValue": 0.82,
      "onChange": [
        "var width = get('width');",
        "var o = get('orientation');",
        "var newX = value / 0.1 / get('height');",
        "if (o === 'left') newX = width - newX;",
        "var obsX = o === 'left' ? newX - getObstacleProperties(0).width : newX;",
        "if (getObstacleProperties(0).x === obsX) return;",
        "setObstacleProperties(0, {x: obsX});",
        "var minX = Infinity;",
        "var maxX = 0;",
        "for(var i = 0; i < getNumberOfAtoms(); i++) {",
        "  var atomX = getAtomProperties(i).x;",
        "  if (atomX > maxX) maxX = atomX;",
        "  else if (atomX < minX) minX = atomX;",
        "}",
        "if (o === 'right' && newX - 0.1 > maxX) return;",
        "if (o === 'left' && newX + 0.1 < minX) return;",
        "var scaleFactor = o === 'left' ? (width - newX - 0.1) / (width - minX) : (newX - 0.1) / maxX;",
        "batch(function() {",
        "  var num = getNumberOfAtoms();",
        "  for(i = 0; i < num; i++) {",
        "    setAtomProperties(i, o === 'left' ? {x: width - (width - getAtomProperties(i).x) * scaleFactor } :",
        "                                        {x: getAtomProperties(i).x * scaleFactor});",
        "  }",
        "});",
        "if (scaleFactor < 1) {",
        "  minimizeEnergy();",
        "}"
      ]
    },
    {
      "name": "plungerHighlighted",
      "initialValue": false,
      "onChange": [
        "setObstacleProperties(0, {color: value ? '#E8DC36' : '#888'});",
        "setComponentDisabled('plunger-right', value);",
        "setComponentDisabled('plunger-left', value);"
      ]
    },
    {
      "name": "atomsHighlighted",
      "initialValue": false,
      "onChange": [
        "setElementProperties(3, {color: value ? -13134236 : -3355444});"
      ]
    }
  ],
  "outputs": [
    {
      "name": "pressureProbeInstantaneous",
      "unitType": "pressure",
      "label": "Pressure Gauge",
      "value": [
        "return get('orientation') === 'right' ? getObstacleProperties(0).westProbeValue : getObstacleProperties(0).eastProbeValue;"
      ]
    }
  ],
  "filteredOutputs": [
    {
      "name": "pressureProbeFiltered",
      "unitType": "pressure",
      "label": "Pressure Gauge",
      "property": "pressureProbeInstantaneous",
      "type": "RunningAverage",
      "period": 2500
    }
  ],
  "components": [
    {
      "type": "barGraph",
      "id": "bar-graph",
      "min": 0,
      "max": 2.5,
      "title": "Pressure (Bar)",
      "property": "pressureProbeFiltered"
    },
    {
      "id": "plunger-left",
      "type": "button",
      "action": [
        "if (get('orientation') === 'left') {",
        "  if (get('volume') < 0.77) { set({ volume: get('volume') + 0.05 }) };",
        "} else {",
        "  if (get('volume') > 0.14) { set({ volume: get('volume') - 0.05 }) };",
        "}"
      ],
      "text": "⟵"
    },
    {
      "id": "plunger-right",
      "type": "button",
      "action": [
        "if (get('orientation') === 'left') {",
        "  if (get('volume') > 0.14) { set({ volume: get('volume') - 0.05 }) };",
        "} else {",
        "  if (get('volume') < 0.77) { set({ volume: get('volume') + 0.05 }) };",
        "}"
    ],
      "text": "⟶"
    }
  ],
  "layout": {
    "right": [
      "bar-graph"
    ]
  },
  "template": "narrow-right"
}
