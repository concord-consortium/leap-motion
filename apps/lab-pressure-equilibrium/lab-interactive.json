{
  "title": "Pressure Equilibrium",
  "publicationStatus": "public",
  "subtitle": "Explore how heat and number of molecules affect pressure equilibrium between two gases.",
  "aspectRatio": 1.9,
  "about": [
    "There are gases on both sides of a moveable barrier (piston), which stays in the same place",
    "(more or less) when you run the model because the gas pressure on the piston is in equilibrium.",
    "",
    "Add purple gas molecules and watch what happens to the piston. Reset the model. Now add",
    "yellow gas molecules. What happens to the piston?",
    "",
    "Try heating or cooling the gas molecules. Explain the change in equilibrium with each",
    "change. Which has a greater effect on equilibrium -- changing the number of gas molecules",
    "or changing the temperature? Why?"
  ],
  "models": [
    {
      "type": "md2d",
      "id": "page7$0",
      "viewOptions": {
        "controlButtons": "play_reset",
        "showVelocityVectors": false,
        "textBoxes": [
          {
            "text": "Piston wall",
            "x": 1.7465425109863282,
            "y": 1.43,
            "width": 0.5,
            "textAlign": "center",
            "layer": 1,
            "hostType": "RectangularObstacle",
            "hostIndex": 0
          }
        ]
      },
      "onLoad": [
        "set('updateAtomIndicesCount', 1);",
        "callEvery(get('timeStep') * get('timeStepsPerTick') * 15, function() {",
        "  batch(function() {",
        "    setTemperatureOfAtoms(get('purpleAtomIndices'), get('purpleAtomTemperature'));",
        "    setTemperatureOfAtoms(get('yellowAtomIndices'), get('yellowAtomTemperature'));",
        "  });",
        "});"
      ]
    }
  ],
  "outputs": [
    {
      "name": "westPressureProbeInstantaneous",
      "unitType": "pressure",
      "label": "Pressure Gauge",
      "value": [
        "return getObstacleProperties(0).westProbeValue;"
      ]
    },
    {
      "name": "eastPressureProbeInstantaneous",
      "unitType": "pressure",
      "label": "Pressure Gauge",
      "value": [
        "return getObstacleProperties(0).eastProbeValue;"
      ]
    },
    {
      "name": "vxMean",
      "unitType": "velocity",
      "value": [
        "var vxSum = 0;",
        "var atomNum = getNumberOfAtoms();",
        "for (var i = 0; i < atomNum; i++) {",
        "  vxSum += Math.abs(getAtomProperties(i).vx);",
        "}",
        "return vxSum / atomNum;"
      ]
    },
    {
      "name": "vyMean",
      "unitType": "velocity",
      "value": [
        "var vySum = 0;",
        "var atomNum = getNumberOfAtoms();",
        "for (var i = 0; i < atomNum; i++) {",
        "  vySum += Math.abs(getAtomProperties(i).vy);",
        "}",
        "return vySum / atomNum;"
      ]
    },
    {
      "name": "volumeInside",
      "unitType": "length",
      "value": [
        "return 0.1 * get('height') * getObstacleProperties(0).x;"
      ]
    },
    {
      "name": "volumeOutside",
      "unitType": "length",
      "value": [
        "return 0.1 * get('height') * (get('width')-getObstacleProperties(0).x-getObstacleProperties(0).width);"
      ]
    }
  ],
  "filteredOutputs": [
    {
      "name": "westPressureProbeFiltered",
      "unitType": "pressure",
      "label": "Pressure Gauge",
      "property": "westPressureProbeInstantaneous",
      "type": "RunningAverage",
      "period": 2500
    },
    {
      "name": "eastPressureProbeFiltered",
      "unitType": "pressure",
      "label": "Pressure Gauge",
      "property": "eastPressureProbeInstantaneous",
      "type": "RunningAverage",
      "period": 2500
    }
  ],
  "parameters": [
    {
      "name": "updateAtomIndicesCount",
      "initialValue": 0,
      "onChange": [
        "var purpleAtomIndices = [],",
        "    yellowAtomIndices = [],",
        "    i;",
        "for (i = 0; i < getNumberOfAtoms(); i++) {",
        "  if (getAtomProperties(i).element === 1) {",
        "    yellowAtomIndices.push(i);",
        "  } else {",
        "    purpleAtomIndices.push(i);",
        "  }",
        "}",
        "set('purpleAtomIndices', purpleAtomIndices);",
        "set('yellowAtomIndices', yellowAtomIndices);"
      ]
    },
    {
      "name": "purpleAtomIndices",
      "initialValue": [
        1
      ],
      "onChange": ""
    },
    {
      "name": "yellowAtomIndices",
      "initialValue": [
        1
      ],
      "onChange": ""
    },
    {
      "name": "purpleAtomTemperature",
      "initialValue": 500,
      "onChange": ""
    },
    {
      "name": "yellowAtomTemperature",
      "initialValue": 500,
      "onChange": ""
    },
    {
      "name": "purpleAtomsCount",
      "initialValue": 30,
      "onChange": [
        "var elemNum = 3;",
        "var currentCount = getNumberOfAtoms(function(atom) { return atom.element === elemNum; });",
        "var maxX = getObstacleProperties(0).x - getElementProperties(elemNum).sigma;",
        "while (currentCount < value) {",
        "  addAtom({ element: elemNum, x: maxX * Math.random(), y: get('height') * Math.random(), vx: get('vxMean'), vy: get('vyMean')});",
        "  currentCount += 1;",
        "}",
        "var i = 0;",
        "var firstFound = false;",
        "while (currentCount > value && i < getNumberOfAtoms()) {",
        "  if (getAtomProperties(i).element === elemNum) {",
        "    if (!firstFound) { firstFound = true; i++; }",
        "    else { removeAtom(i); currentCount -= 1; }",
        "  } else { i++; }",
        "}",
        "if (currentCount !== value) { set('purpleAtomsCount', currentCount); };",
        "set('updateAtomIndicesCount', get('updateAtomIndicesCount') + 1);"
      ]
    },
    {
      "name": "yellowAtomsCount",
      "initialValue": 30,
      "onChange": [
        "var elemNum = 1;",
        "var currentCount = getNumberOfAtoms(function(atom) { return atom.element === elemNum; });",
        "var minX = getObstacleProperties(0).x + getObstacleProperties(0).width + getElementProperties(elemNum).sigma;",
        "while (currentCount < value) {",
        "  addAtom({ element: elemNum, x: (get('width') - minX) * Math.random() + minX , y: get('height') * Math.random(), vx: get('vxMean'), vy: get('vyMean')});",
        "  currentCount += 1;",
        "}",
        "var i = 0;",
        "var firstFound = false;",
        "while (currentCount > value && i < getNumberOfAtoms()) {",
        "  if (getAtomProperties(i).element === elemNum) {",
        "    if (!firstFound) { firstFound = true; i++; }",
        "    else { removeAtom(i); currentCount -= 1; }",
        "  } else { i++; }",
        "}",
        "if (currentCount !== value) { set('yellowAtomsCount', currentCount); };",
        "set('updateAtomIndicesCount', get('updateAtomIndicesCount') + 1);"
      ]
    }
  ],
  "components": [
    {
      "type": "checkbox",
      "id": "show-velocity",
      "text": "Velocity vectors",
      "property": "showVelocityVectors"
    },
    {
      "type": "numericOutput",
      "id": "purple-atoms",
      "property": "purpleAtomsCount",
      "label": "Purple"
    },
    {
      "type": "numericOutput",
      "id": "yellow-atoms",
      "property": "yellowAtomsCount",
      "label": "Yellow"
    },
    {
      "type": "barGraph",
      "id": "temperature-inside",
      "property": "purpleAtomTemperature",
      "title": "T",
      "labels": 0,
      "min": 0,
      "max": 5000,
      "titleOn": "top",
      "barWidth": "1.5em"
    },
    {
      "type": "barGraph",
      "id": "temperature-outside",
      "property": "yellowAtomTemperature",
      "title": "T",
      "labels": 0,
      "min": 0,
      "max": 5000,
      "titleOn": "top",
      "barWidth": "1.5em"
    },
    {
      "type": "barGraph",
      "id": "pressure-inside",
      "property": "westPressureProbeFiltered",
      "title": "P",
      "labels": 0,
      "min": 0,
      "max": 4,
      "titleOn": "top",
      "barWidth": "1.5em"
    },
    {
      "type": "barGraph",
      "id": "pressure-outside",
      "property": "eastPressureProbeFiltered",
      "title": "P",
      "labels": 0,
      "min": 0,
      "max": 4,
      "titleOn": "top",
      "barWidth": "1.5em"
    },
    {
      "type": "barGraph",
      "id": "volume-inside",
      "property": "volumeInside",
      "title": "V",
      "labels": 0,
      "min": 0,
      "max": 1,
      "titleOn": "top",
      "barWidth": "1.5em"
    },
    {
      "type": "barGraph",
      "id": "volume-outside",
      "property": "volumeOutside",
      "title": "V",
      "labels": 0,
      "min": 0,
      "max": 1,
      "titleOn": "top",
      "barWidth": "1.5em"
    }
  ],
  "layout": {
    "left-graphs": [
      "temperature-inside",
      "pressure-inside",
      "volume-inside"
    ],
    "left-count": [
      "purple-atoms"
    ],
    "right-graphs": [
      "temperature-outside",
      "pressure-outside",
      "volume-outside"
    ],
    "right-count": [
      "yellow-atoms"
    ],
    "footer": [
      "show-velocity"
    ]
  },
  "template": [
    {
      "id": "left-graphs",
      "top": "model.top",
      "bottom": "model.bottom",
      "right": "model.left",
      "align": "center",
      "fontScale": 0.8
    },
    {
      "id": "right-graphs",
      "top": "model.top",
      "bottom": "model.bottom",
      "left": "model.right",
      "align": "center",
      "fontScale": 0.8
    },
    {
      "id": "left-count",
      "top": "model.bottom",
      "left": "model.left",
      "padding-top": "0.5em",
      "align": "left",
      "fontScale": 0.8
    },
    {
      "id": "right-count",
      "top": "model.bottom",
      "right": "model.right",
      "padding-top": "0.5em",
      "align": "right",
      "fontScale": 0.8
    },
    {
      "id": "footer",
      "left": "model.left",
      "top": "model.bottom",
      "width": "model.width",
      "align": "center",
      "padding-top": "0.5em",
      "fontScale": 0.8
    }
  ]
}
