{
  "title": "Heat Transfer Micro V2",
  "publicationStatus": "draft",
  "subtitle": "GRASP",
  "about": "",
  "aspectRatio": 1.6,
  "fontScale": 0.75,
  "models": [
    {
      "type": "md2d",
      "id": "vacuum",
      "url": "models/lab-version/1/md2d/grasp/heat-transfer-micro/model-v2.json",
      "viewOptions": {
        "controlButtons": "play_reset",
        "atomRadiusScale": 1.10
      },
      "onLoad": [
        "onClick('atom', function(x, y, atom) {",
        "  markAtoms([atom.idx]); console.log(atom.idx);",
        "});",
        "",
        "var KE_CHANGE = 0.07;",
        "var DIST_THRESHOLD = 0.1575;",
        "var INTERVAL = get('timeStep') * get('timeStepsPerTick') * 3;",
        "var FADE_SPEED = 0.03333;",
        "var POINT_SIZE = 0.018;",
        "var SIGN_SIZE = 0.08;",
        "var SIGN_WIDTH = 0.02;",
        "var POINT_COLOR = '255, 16, 16';",
        "var SIGN_COLOR = '218, 145, 29';",
        "var alpha = [];",
        "var coords = [];",
        "var atom = [];",
        "var offset = [];",
        "var color = [];",
        "var prevAtomCoords = [];",
        "",
        "function dist(a1, a2) {",
        "  var x = a1.x - a2.x; var y = a1.y - a2.y;",
        "  return Math.sqrt(x * x + y * y);",
        "}",
        "function middle(a1, a2, ratio) {",
        "  return {x: a1.x + (a2.x - a1.x) * ratio - POINT_SIZE * 0.5, y: a1.y + (a2.y - a1.y) * ratio - POINT_SIZE * 0.5};",
        "}",
        "function colorFunc(rgb, alpha) {",
        "  return 'rgba(' + rgb + ', ' + alpha + ')';",
        "}",
        "function addData(coordsVal, offsetVal, rgb, idx, atomProps) {",
        "  coords.push(coordsVal);",
        "  offset.push(offsetVal);",
        "  alpha.push(1);",
        "  atom.push(idx);",
        "  color.push(rgb);",
        "  prevAtomCoords.push(atomProps);",
        "}",
        "function addPoint(coords, idx, atomProps) {",
        "  addShape({",
        "    type: 'ellipse',",
        "    x: coords.x,",
        "    y: coords.y,",
        "    width: POINT_SIZE,",
        "    height: POINT_SIZE,",
        "    color: colorFunc(POINT_COLOR, 1),",
        "    lineColor: 'transparent',",
        "    layer: 1",
        "  });",
        "  addData(coords, {x: 0, y: 0}, POINT_COLOR, idx, atomProps);",
        "}",
        "function addMinusSign(idx) {",
        "  var atom = getAtomProperties(idx);",
        "  var offset = {x: SIGN_SIZE * -0.5, y: SIGN_WIDTH * -0.5};",
        "  addShape({",
        "    type: 'rectangle',",
        "    x: atom.x + offset.x,",
        "    y: atom.y + offset.y,",
        "    width: SIGN_SIZE,",
        "    height: SIGN_WIDTH,",
        "    color: colorFunc(SIGN_COLOR, 1),",
        "    lineColor: 'transparent',",
        "    layer: 1",
        "  });",
        "  addData(atom, offset, SIGN_COLOR, idx, atom);",
        "}",
        "function addPlusSign(idx) {",
        "  // Plus is minus (horizontal bar) and vertical bar.",
        "  addMinusSign(idx);",
        "  var atom = getAtomProperties(idx);",
        "  var offset = {x: SIGN_WIDTH * -0.5, y: SIGN_SIZE * -0.5};",
        "  addShape({",
        "    type: 'rectangle',",
        "    x: atom.x + offset.x,",
        "    y: atom.y + offset.y,",
        "    width: SIGN_WIDTH,",
        "    height: SIGN_SIZE,",
        "    color: colorFunc(SIGN_COLOR, 1),",
        "    lineColor: 'transparent',",
        "    layer: 1",
        "  });",
        "  addData(atom, offset, SIGN_COLOR, idx, atom);",
        "}",
        "function addPoints(idx) {",
        "  for (var i = 0, len = getNumberOfAtoms(); i < len; i++) {",
        "    for (var j = i + 1; j < len; j++) {",
        "      var a1 = getAtomProperties(i);",
        "      var a2 = getAtomProperties(j);",
        "      if (dist(a1, a2) < DIST_THRESHOLD) {",
        "        var c1 = middle(a1, a2, 0.45);",
        "        addPoint(c1, i, a1);",
        "        var c2 = middle(a1, a2, 0.55);",
        "        addPoint(c2, j, a2);",
        "      }",
        "    }",
        "  }",
        "}",
        "function update() {",
        "  for (var i = 0, len = getNumberOfShapes(); i < len; i++) {",
        "    alpha[i] -= FADE_SPEED * INTERVAL;",
        "    var a = getAtomProperties(atom[i]);",
        "    coords[i].x += a.x - prevAtomCoords[i].x;",
        "    coords[i].y += a.y - prevAtomCoords[i].y;",
        "    prevAtomCoords[i] = a;",
        "    if (alpha[i] > 0) {",
        "      setShapeProperties(i, {color: colorFunc(color[i], alpha[i]), x: coords[i].x + offset[i].x, y: coords[i].y + offset[i].y});",
        "    }",
        "  }",
        "}",
        "function rmInvisiblePoints() {",
        "  while (alpha[0] <= 0) {",
        "    alpha.shift();",
        "    coords.shift();",
        "    atom.shift();",
        "    offset.shift();",
        "    color.shift();",
        "    prevAtomCoords.shift();",
        "    removeShape(0);",
        "  }",
        "}",
        "",
        "callEvery(INTERVAL, function () {",
        "  batch(function () {",
        "    addPoints();",
        "    update();",
        "    rmInvisiblePoints();",
        "",
        "    switch(get('keChange')) {",
        "      case 'increasing': ",
        "        addKEToAtoms(KE_CHANGE, [4]); break;",
        "      case 'decreasing': ",
        "        addKEToAtoms(-0.5 * KE_CHANGE);",
        "        setAtomProperties(4, {vx: 0, vy: 0});",
        "        break;",
        "    }",
        "  });",
        "});",
        "onPropertyChange('keDiff', function(value) {",
        "  if (value === '+') {",
        "    addPlusSign(4);",
        "  } else {",
        "    addMinusSign(4);",
        "  }",
        "});"
      ]
    }
  ],
  "parameters": [
    {
      "name": "keChange",
      "initialValue": false,
      "onChange": [
        "var color = -8355712;",
        "if (value === 'neutral') color = -13134236;",
        "if (value === 'increasing') color = -13134236;",
        "if (value === 'decreasing') color = -13134236;",
        "setElementProperties(1, {color: color});"
      ]
    },
    {
    "name": "keDiff",
    "initialValue": null
    }
  ],
  "components": [
    {
      "type": "checkbox",
      "id": "ke-shading",
      "text": "KE Shading",
      "property": "keShading"
    },
    {
      "type": "button",
      "id": "add-ke",
      "text": "+",
      "action": [
        "addKEToAtoms(0.1, [4]);",
        "set('keDiff', '+');"
      ]
    },
    {
      "type": "button",
      "id": "rm-ke",
      "text": "-",
      "action": [
        "setAtomProperties(4, {vx: 0, vy: 0});",
        "set('keDiff', '-');"
      ]
    }
  ]
}
